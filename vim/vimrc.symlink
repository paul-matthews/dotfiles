"==============================================================================
" Core Vim Settings
"
" These settings are universal and should work on any version of Vim.
"==============================================================================

set nocompatible            " Use Vim features, not Vi defaults
set encoding=utf-8          " Set default encoding to UTF-8
set backspace=indent,eol,start " Allow backspace over everything in insert mode
set history=1000            " Remember more commands
set undolevels=1000         " Generous undo history
set ruler                   " Show the cursor position
set showcmd                 " Show incomplete commands
set incsearch               " Highlight matches as you type
set hlsearch                " Highlight all matches
set ignorecase              " Ignore case in searches
set smartcase               " But don't ignore case if the query contains uppercase letters
set hidden                  " Allow switching buffers without saving
set mouse=a                 " Enable mouse support in all modes
set title                   " Set the terminal title
set wildmenu                " Enable enhanced command-line completion
set wildmode=list:longest   " Complete the longest common string, then list alternatives
set scrolloff=8             " Keep 8 lines of context around the cursor
set visualbell              " Use a visual bell instead of a beep
set noerrorbells            " Don't beep on errors

"==============================================================================
" Whitespace and Tabs
"==============================================================================

set expandtab               " Use spaces instead of tabs
set tabstop=4               " Number of spaces a tab counts for
set softtabstop=4           " Number of spaces to insert when tab is pressed
set shiftwidth=4            " Number of spaces to use for auto-indentation
set smarttab                " Be smart about tabs at the start of a line
set smartindent             " Be smart about indentation

" Automatically remove trailing whitespace on save
autocmd BufWritePre * %s/\s\+$//e

"==============================================================================
" UI Settings
"==============================================================================

syntax on                   " Enable syntax highlighting
filetype plugin indent on   " Load filetype-specific plugins and indentation

set number                  " Show line numbers
set showmatch               " Briefly jump to matching brackets
set background=dark         " Assume a dark background

" Set a readable status line
set statusline=%F%m%r%h%w\ [%Y]\ [%{&ff}]\ [line\ %l,\ col\ %v]\ [%p%%]

"==============================================================================
" Key Mappings
"==============================================================================

let mapleader = ","

" Practical mappings
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Paste from system clipboard
nnoremap <leader>p :set paste<CR>o<esc>p:set nopaste<CR>

" Copy to system clipboard
vmap <leader>y "+y

"==============================================================================
" Plugin Management (with graceful degradation)
"
" Uses vim-plug. If vim-plug is not installed, this section is skipped.
" To install plugins, run `:PlugInstall` in Vim.
"==============================================================================

if filereadable(expand('~/.vim/autoload/plug.vim'))
  call plug#begin('~/.vim/plugged')

  " Sensible defaults
  Plug 'tpope/vim-sensible'

  " A modern colorscheme
  Plug 'altercation/vim-colors-solarized'

  " File navigation
  Plug 'scrooloose/nerdtree'
  nnoremap <leader>n :NERDTreeToggle<CR>

  " Git integration
  Plug 'tpope/vim-fugitive'
  nnoremap <leader>gs :Gstatus<CR>

  " Enhanced status line
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  let g:airline_theme='solarized'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1


  " Language Server Protocol (LSP) for code intelligence
  " Requires Node.js and yarn/npm to be installed
  if executable('node')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
  endif

  call plug#end()
endif

"==============================================================================
" Color Scheme and GUI Settings (with graceful degradation)
"==============================================================================

if filereadable(expand('~/.vim/plugged/vim-colors-solarized/colors/solarized.vim'))
  colorscheme solarized
endif

if has("gui_running")
  set guifont=Andale\ Mono:h12
  set lines=50
  set columns=100
endif

" Enable 24-bit color if the terminal supports it
if (has("termguicolors"))
  set termguicolors
endif

"==============================================================================
" Language-Specific Settings
"==============================================================================

augroup filetype_settings
  autocmd!
  " For Ruby, use 2-space indentation
  autocmd FileType ruby setlocal ts=2 sw=2 sts=2
  " For PHP, use 4-space indentation
  autocmd FileType php setlocal ts=4 sw=4 sts=4 makeprg=php\ -l\ %
  " For JavaScript and JSON, use 2-space indentation
  autocmd FileType javascript,json,typescript,typescriptreact setlocal ts=2 sw=2 sts=2
augroup END

"==============================================================================
" CoC (LSP) Configuration (with graceful degradation)
"
" This section is skipped if CoC is not installed.
"==============================================================================

if exists('g:plugs') && has_key(g:plugs, 'coc.nvim')
  " Use tab for completion
  inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

  " Handle <CR> to confirm completion
  inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

  " Go-to-definition and other navigation
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Show documentation on hover
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
endif
